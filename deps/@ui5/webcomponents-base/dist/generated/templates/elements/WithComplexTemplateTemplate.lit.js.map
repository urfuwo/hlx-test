{"version":3,"file":"WithComplexTemplateTemplate.lit.js","sourceRoot":"","sources":["../../../../src/generated/templates/elements/WithComplexTemplateTemplate.lit.ts"],"names":[],"mappings":"AAAA,8BAA8B;AAC9B,OAAO,EAAE,IAAI,EAAO,MAAM,EAAsB,SAAS,EAAwB,MAAM,kCAAkC,CAAC;AAK1H,SAAS,MAAM,CAA6B,OAAmB,EAAE,IAAc,EAAE,MAA0B,IAAI,OAAO,IAAI,CAAA,mBAAmB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAI,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAE,IAAkC,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC,IAAI,EAAE,KAAa,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAE,eAAe,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC;AACxX,SAAS,MAAM,CAA6B,OAAmB,EAAE,IAAc,EAAE,MAA0B,EAAE,IAAS,EAAE,KAAa,IAAI,OAAO,IAAI,CAAA,YAAY,KAAK,QAAS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,SAAU,OAAQ,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAE,IAAkC,CAAC,GAAG,IAAI,KAAK,EAAE,CAAC,IAAI,EAAE,KAAa,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAE,QAAS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,SAAU,EAAE,CAAC,CAAA,CAAC;AACrgB,SAAS,MAAM,CAA6B,OAAmB,EAAE,IAAc,EAAE,MAA0B,EAAE,IAAS,EAAE,KAAa,IAAI,OAAO,IAAI,CAAA,2CAA2C,KAAK,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC;AACtR,SAAS,MAAM,CAA6B,OAAmB,EAAE,IAAc,EAAE,MAA0B,EAAE,IAAS,EAAE,KAAa,IAAI,OAAO,IAAI,CAAA,gBAAgB,KAAK,yCAAyC,KAAK,mBAAmB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,0CAA0C,KAAK,mBAAmB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA,CAAC;AAC3a,SAAS,MAAM,CAA6B,OAAmB,EAAE,IAAc,EAAE,MAA0B,EAAE,IAAS,EAAE,KAAa,IAAI,OAAO,IAAI,CAAA,wCAAwC,KAAK,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA,CAAC;AAGnR,eAAe,MAAM,CAAC","sourcesContent":["/* eslint no-unused-vars: 0 */\nimport { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from \"../../../renderer/LitRenderer.js\";\nimport type UI5Element from \"../../../UI5Element.js\";\n\timport type WithComplexTemplate from \"../../../../test/elements/WithComplexTemplate.js\";\n\timport type { ClassMapValue } from \"../../../types.js\";\n\t\nfunction block0 (this: WithComplexTemplate, context: UI5Element, tags: string[], suffix: string | undefined) { return html`<div>Root text: ${ifDefined(this.text)}${ repeat(this.items, (item, index) => (item as typeof item & {_id?: any})._id || index, (item, index: number) => block1.call(this, context, tags, suffix, item, index)) } Root text: ${ifDefined(this.text)}</div>`;}\nfunction block1 (this: WithComplexTemplate, context: UI5Element, tags: string[], suffix: string | undefined, item: any, index: number) { return html`<h3>Item-${index}</h3>${ item.text ? block2.call(this, context, tags, suffix, item, index) : undefined }<ul>${ repeat(item.words, (item, index) => (item as typeof item & {_id?: any})._id || index, (item, index: number) => block3.call(this, context, tags, suffix, item, index)) }</ul>${ item.text ? block4.call(this, context, tags, suffix, item, index) : undefined }`;}\nfunction block2 (this: WithComplexTemplate, context: UI5Element, tags: string[], suffix: string | undefined, item: any, index: number) { return html`<div class=\"before-each-content--start--${index}\">Root text: ${ifDefined(this.text)}, Item text: ${ifDefined(item.text)}</div>`;}\nfunction block3 (this: WithComplexTemplate, context: UI5Element, tags: string[], suffix: string | undefined, item: any, index: number) { return html`<li><h3>Word-${index}</h3><div class=\"nested-each-content--${index}--0\">Root Text: ${ifDefined(this.text)}, Word text: ${ifDefined(item.text)}</div><div class=\"nested-each-content--${index}--1\">Root Text: ${ifDefined(this.text)}, Word text: ${ifDefined(item.text)}</div></li>`;}\nfunction block4 (this: WithComplexTemplate, context: UI5Element, tags: string[], suffix: string | undefined, item: any, index: number) { return html`<div class=\"after-each-content--end--${index}\">Root text: ${ifDefined(this.text)}, Item text: ${ifDefined(item.text)}</div>`;}\n\n\nexport default block0;"]}