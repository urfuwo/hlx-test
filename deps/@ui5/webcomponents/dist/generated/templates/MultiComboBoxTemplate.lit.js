/* eslint no-unused-vars: 0 */
import { html, repeat, ifDefined, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
function block0(context, tags, suffix) { return suffix ? html `<div class="ui5-multi-combobox-root ui5-input-focusable-element"><span id="ui5-multi-combobox-hiddenText-nMore" class="ui5-hidden-text">${ifDefined(this._tokensCountText)}</span>${this.hasValueState ? block1.call(this, context, tags, suffix) : undefined}<${scopeTag("ui5-tokenizer", tags, suffix)} slot="_beginContent" show-more prevent-popover-open class="ui5-multi-combobox-tokenizer" ?disabled="${this.disabled}" @ui5-show-more-items-press="${ifDefined(this._showFilteredItems)}" .morePopoverOpener=${ifDefined(this.morePopoverOpener)} .popoverMinWidth=${ifDefined(this._inputWidth)} @ui5-token-delete="${ifDefined(this._tokenDelete)}" @ui5-before-more-popover-open="${ifDefined(this.handleBeforeTokenizerPopoverOpen)}" @focusout="${this._tokenizerFocusOut}" @focusin="${this._tokenizerFocusIn}" @click=${this._click} @paste=${this._handlePaste} @keydown="${this._onTokenizerKeydown}" ?expanded="${this._tokenizerExpanded}">${repeat(this.items, (item, index) => item._id || index, (item, index) => block2.call(this, context, tags, suffix, item, index))}</${scopeTag("ui5-tokenizer", tags, suffix)}><input id="ui5-multi-combobox-input" .value="${ifDefined(this.value)}" inner-input placeholder=${ifDefined(this._getPlaceholder)} ?disabled=${this.disabled} ?readonly=${this.readonly} value-state="${ifDefined(this.valueState)}" @input="${this._inputLiveChange}" @change=${this._inputChange} @keydown="${this._onkeydown}" @click=${this._click} @focusin=${this.inputFocusIn} @focusout=${this.inputFocusOut} @paste=${this._handlePaste} role="combobox" aria-haspopup="listbox" aria-expanded="${ifDefined(this.open)}" aria-autocomplete="both" aria-describedby="${ifDefined(this.ariaDescribedByText)}" aria-required="${ifDefined(this.required)}" aria-label="${ifDefined(this.ariaLabelText)}" data-sap-focus-ref />${this.icon ? block4.call(this, context, tags, suffix) : undefined}${!this.readonly ? block5.call(this, context, tags, suffix) : undefined}</div>` : html `<div class="ui5-multi-combobox-root ui5-input-focusable-element"><span id="ui5-multi-combobox-hiddenText-nMore" class="ui5-hidden-text">${ifDefined(this._tokensCountText)}</span>${this.hasValueState ? block1.call(this, context, tags, suffix) : undefined}<ui5-tokenizer slot="_beginContent" show-more prevent-popover-open class="ui5-multi-combobox-tokenizer" ?disabled="${this.disabled}" @ui5-show-more-items-press="${ifDefined(this._showFilteredItems)}" .morePopoverOpener=${ifDefined(this.morePopoverOpener)} .popoverMinWidth=${ifDefined(this._inputWidth)} @ui5-token-delete="${ifDefined(this._tokenDelete)}" @ui5-before-more-popover-open="${ifDefined(this.handleBeforeTokenizerPopoverOpen)}" @focusout="${this._tokenizerFocusOut}" @focusin="${this._tokenizerFocusIn}" @click=${this._click} @paste=${this._handlePaste} @keydown="${this._onTokenizerKeydown}" ?expanded="${this._tokenizerExpanded}">${repeat(this.items, (item, index) => item._id || index, (item, index) => block2.call(this, context, tags, suffix, item, index))}</ui5-tokenizer><input id="ui5-multi-combobox-input" .value="${ifDefined(this.value)}" inner-input placeholder=${ifDefined(this._getPlaceholder)} ?disabled=${this.disabled} ?readonly=${this.readonly} value-state="${ifDefined(this.valueState)}" @input="${this._inputLiveChange}" @change=${this._inputChange} @keydown="${this._onkeydown}" @click=${this._click} @focusin=${this.inputFocusIn} @focusout=${this.inputFocusOut} @paste=${this._handlePaste} role="combobox" aria-haspopup="listbox" aria-expanded="${ifDefined(this.open)}" aria-autocomplete="both" aria-describedby="${ifDefined(this.ariaDescribedByText)}" aria-required="${ifDefined(this.required)}" aria-label="${ifDefined(this.ariaLabelText)}" data-sap-focus-ref />${this.icon ? block4.call(this, context, tags, suffix) : undefined}${!this.readonly ? block5.call(this, context, tags, suffix) : undefined}</div>`; }
function block1(context, tags, suffix) { return html `<span id="ui5-multi-combobox-valueStateDesc" class="ui5-hidden-text">${ifDefined(this.ariaValueStateHiddenText)}</span>`; }
function block2(context, tags, suffix, item, index) { return html `${item.selected ? block3.call(this, context, tags, suffix, item, index) : undefined}`; }
function block3(context, tags, suffix, item, index) { return suffix ? html `<${scopeTag("ui5-token", tags, suffix)} ?readonly="${this.readonly}" class="ui5-multi-combobox-token" data-ui5-id="${ifDefined(item._id)}" part="token-${index}" text="${ifDefined(item.text)}"></${scopeTag("ui5-token", tags, suffix)}>` : html `<ui5-token ?readonly="${this.readonly}" class="ui5-multi-combobox-token" data-ui5-id="${ifDefined(item._id)}" part="token-${index}" text="${ifDefined(item.text)}"></ui5-token>`; }
function block4(context, tags, suffix) { return html `<slot name="icon"></slot>`; }
function block5(context, tags, suffix) { return suffix ? html `<${scopeTag("ui5-icon", tags, suffix)} name="slim-arrow-down" input-icon slot="icon" tabindex="-1" @click="${this.togglePopoverByDropdownIcon}" @mousedown="${this._onIconMousedown}" @focusin="${this._forwardFocusToInner}" ?pressed="${this.open}" accessible-name="${ifDefined(this._iconAccessibleNameText)}"></${scopeTag("ui5-icon", tags, suffix)}>` : html `<ui5-icon name="slim-arrow-down" input-icon slot="icon" tabindex="-1" @click="${this.togglePopoverByDropdownIcon}" @mousedown="${this._onIconMousedown}" @focusin="${this._forwardFocusToInner}" ?pressed="${this.open}" accessible-name="${ifDefined(this._iconAccessibleNameText)}"></ui5-icon>`; }
export default block0;
//# sourceMappingURL=MultiComboBoxTemplate.lit.js.map