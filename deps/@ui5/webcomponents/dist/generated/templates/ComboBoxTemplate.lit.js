/* eslint no-unused-vars: 0 */
import { html, ifDefined, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
function block0(context, tags, suffix) { return html `<div class="ui5-combobox-root ui5-input-focusable-element">${this.hasValueState ? block1.call(this, context, tags, suffix) : undefined}<input id="ui5-combobox-input" .value="${ifDefined(this.value)}" inner-input placeholder="${ifDefined(this.placeholder)}" ?disabled=${this.disabled} ?readonly=${this.readonly} value-state="${ifDefined(this.valueState)}" @keydown="${this._keydown}" @input="${this._input}" @change="${this._inputChange}" @click=${this._click} @keyup="${this._keyup}" @focusin="${this._focusin}" @focusout="${this._focusout}" aria-expanded="${ifDefined(this.open)}" role="combobox" aria-haspopup="listbox" aria-autocomplete="both" aria-describedby="value-state-description" aria-label="${ifDefined(this.ariaLabelText)}" aria-required="${ifDefined(this.required)}" data-sap-focus-ref />${this.icon ? block2.call(this, context, tags, suffix) : undefined}${!this.readonly ? block3.call(this, context, tags, suffix) : undefined}</div>`; }
function block1(context, tags, suffix) { return html `<span id="value-state-description" class="ui5-hidden-text">${ifDefined(this.ariaValueStateHiddenText)}</span>`; }
function block2(context, tags, suffix) { return html `<slot name="icon"></slot>`; }
function block3(context, tags, suffix) { return suffix ? html `<${scopeTag("ui5-icon", tags, suffix)} name="slim-arrow-down" slot="icon" tabindex="-1" input-icon ?pressed="${this._iconPressed}" @click="${this._arrowClick}" accessible-name="${ifDefined(this._iconAccessibleNameText)}"></${scopeTag("ui5-icon", tags, suffix)}>` : html `<ui5-icon name="slim-arrow-down" slot="icon" tabindex="-1" input-icon ?pressed="${this._iconPressed}" @click="${this._arrowClick}" accessible-name="${ifDefined(this._iconAccessibleNameText)}"></ui5-icon>`; }
export default block0;
//# sourceMappingURL=ComboBoxTemplate.lit.js.map