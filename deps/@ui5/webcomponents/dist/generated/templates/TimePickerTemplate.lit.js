/* eslint no-unused-vars: 0 */
import { html, ifDefined, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
function block0(context, tags, suffix) { return suffix ? html `<div id="${ifDefined(this._id)}" class="ui5-time-picker-root"><${scopeTag("ui5-input", tags, suffix)} id="${ifDefined(this._id)}-inner" value="${ifDefined(this.value)}" placeholder="${ifDefined(this._placeholder)}" ?disabled="${this.disabled}" ?readonly="${this.readonly}" value-state="${ifDefined(this.valueState)}" ._inputAccInfo="${ifDefined(this.accInfo)}" data-sap-focus-ref @click="${this._handleInputClick}" @ui5-change="${ifDefined(this._handleInputChange)}" @ui5-input="${ifDefined(this._handleInputLiveChange)}" @focusin="${this._onfocusin}" @input="${this._oninput}" class="ui5-time-picker-input" @keydown="${this._onkeydown}">${this.valueStateMessage.length ? block1.call(this, context, tags, suffix) : undefined}${!this.readonly ? block2.call(this, context, tags, suffix) : undefined}</${scopeTag("ui5-input", tags, suffix)}></div>` : html `<div id="${ifDefined(this._id)}" class="ui5-time-picker-root"><ui5-input id="${ifDefined(this._id)}-inner" value="${ifDefined(this.value)}" placeholder="${ifDefined(this._placeholder)}" ?disabled="${this.disabled}" ?readonly="${this.readonly}" value-state="${ifDefined(this.valueState)}" ._inputAccInfo="${ifDefined(this.accInfo)}" data-sap-focus-ref @click="${this._handleInputClick}" @ui5-change="${ifDefined(this._handleInputChange)}" @ui5-input="${ifDefined(this._handleInputLiveChange)}" @focusin="${this._onfocusin}" @input="${this._oninput}" class="ui5-time-picker-input" @keydown="${this._onkeydown}">${this.valueStateMessage.length ? block1.call(this, context, tags, suffix) : undefined}${!this.readonly ? block2.call(this, context, tags, suffix) : undefined}</ui5-input></div>`; }
function block1(context, tags, suffix) { return html `<slot name="valueStateMessage" slot="valueStateMessage"></slot>`; }
function block2(context, tags, suffix) { return suffix ? html `<${scopeTag("ui5-icon", tags, suffix)} slot="icon" name="${ifDefined(this.openIconName)}" tabindex="-1" show-tooltip @click="${this.togglePicker}" input-icon ?pressed="${this._isPickerOpen}" class="ui5-time-picker-input-icon-button"></${scopeTag("ui5-icon", tags, suffix)}>` : html `<ui5-icon slot="icon" name="${ifDefined(this.openIconName)}" tabindex="-1" show-tooltip @click="${this.togglePicker}" input-icon ?pressed="${this._isPickerOpen}" class="ui5-time-picker-input-icon-button"></ui5-icon>`; }
export default block0;
//# sourceMappingURL=TimePickerTemplate.lit.js.map