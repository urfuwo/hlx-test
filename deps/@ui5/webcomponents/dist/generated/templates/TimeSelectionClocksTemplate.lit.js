/* eslint no-unused-vars: 0 */
import { html, repeat, ifDefined, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
function block0(context, tags, suffix) { return html `<div id="${ifDefined(this._id)}" class="ui5-time-picker-tsc-container" tabindex="-1" @keydown=${this._onkeydown} @keyup=${this._onkeyup} @focusin=${this._clocksFocusIn} format-pattern="${ifDefined(this.formatPattern)}"><div class="ui5-time-picker-tsc-buttons">${repeat(this._entities, (item, index) => item._id || index, (item, index) => block1.call(this, context, tags, suffix, item, index))}${this._periods.length ? block3.call(this, context, tags, suffix) : undefined}</div><div class="ui5-time-picker-tsc-clocks" role="img" aria-label="${ifDefined(this.clockDialAriaLabel)}">${repeat(this._entities, (item, index) => item._id || index, (item, index) => block5.call(this, context, tags, suffix, item, index))}</div></div>`; }
function block1(context, tags, suffix, item, index) { return suffix ? html `${item.hasSeparator ? block2.call(this, context, tags, suffix, item, index) : undefined}<${scopeTag("ui5-toggle-spin-button", tags, suffix)} id="${ifDefined(this._id)}_button_${ifDefined(item.entity)}" .valueMin="${ifDefined(item.attributes.min)}" .valueMax="${ifDefined(item.attributes.max)}" .valueNow="${ifDefined(item.value)}" .valueText="${ifDefined(item.textValue)}" .accessibleName="${ifDefined(item.label)}" .pressed="${ifDefined(item.active)}" ?focused="${item.active}" @focusin="${this._buttonFocusIn}">${ifDefined(item.stringValue)}</${scopeTag("ui5-toggle-spin-button", tags, suffix)}>` : html `${item.hasSeparator ? block2.call(this, context, tags, suffix, item, index) : undefined}<ui5-toggle-spin-button id="${ifDefined(this._id)}_button_${ifDefined(item.entity)}" .valueMin="${ifDefined(item.attributes.min)}" .valueMax="${ifDefined(item.attributes.max)}" .valueNow="${ifDefined(item.value)}" .valueText="${ifDefined(item.textValue)}" .accessibleName="${ifDefined(item.label)}" .pressed="${ifDefined(item.active)}" ?focused="${item.active}" @focusin="${this._buttonFocusIn}">${ifDefined(item.stringValue)}</ui5-toggle-spin-button>`; }
function block2(context, tags, suffix, item, index) { return html `<span separator>:</span>`; }
function block3(context, tags, suffix) { return suffix ? html `<span separator></span><${scopeTag("ui5-segmented-button", tags, suffix)} id="${ifDefined(this._id)}_AmPm" @click=${this._periodChange}>${repeat(this._periods, (item, index) => item._id || index, (item, index) => block4.call(this, context, tags, suffix, item, index))}</${scopeTag("ui5-segmented-button", tags, suffix)}>` : html `<span separator></span><ui5-segmented-button id="${ifDefined(this._id)}_AmPm" @click=${this._periodChange}>${repeat(this._periods, (item, index) => item._id || index, (item, index) => block4.call(this, context, tags, suffix, item, index))}</ui5-segmented-button>`; }
function block4(context, tags, suffix, item, index) { return suffix ? html `<${scopeTag("ui5-segmented-button-item", tags, suffix)} ?pressed=${item.pressed}>${ifDefined(item.label)}</${scopeTag("ui5-segmented-button-item", tags, suffix)}>` : html `<ui5-segmented-button-item ?pressed=${item.pressed}>${ifDefined(item.label)}</ui5-segmented-button-item>`; }
function block5(context, tags, suffix, item, index) { return suffix ? html `<${scopeTag("ui5-time-picker-clock", tags, suffix)} id="${ifDefined(this._id)}_clock_${ifDefined(item.entity)}" data-sap-clock="${ifDefined(item.entity)}" .active="${ifDefined(item.active)}" .label="${ifDefined(item.label)}" .itemMin="${ifDefined(item.itemMin)}" .itemMax="${ifDefined(item.itemMax)}" .selectedValue="${ifDefined(item.value)}" .displayStep="${ifDefined(item.displayStep)}" .valueStep="${ifDefined(item.attributes.step)}" .lastItemReplacement="${ifDefined(item.lastItemReplacement)}" .showInnerCircle="${ifDefined(item.showInnerCircle)}" .prependZero="${ifDefined(item.prependZero)}" @ui5-change=${ifDefined(this._clockChange)}></${scopeTag("ui5-time-picker-clock", tags, suffix)}>` : html `<ui5-time-picker-clock id="${ifDefined(this._id)}_clock_${ifDefined(item.entity)}" data-sap-clock="${ifDefined(item.entity)}" .active="${ifDefined(item.active)}" .label="${ifDefined(item.label)}" .itemMin="${ifDefined(item.itemMin)}" .itemMax="${ifDefined(item.itemMax)}" .selectedValue="${ifDefined(item.value)}" .displayStep="${ifDefined(item.displayStep)}" .valueStep="${ifDefined(item.attributes.step)}" .lastItemReplacement="${ifDefined(item.lastItemReplacement)}" .showInnerCircle="${ifDefined(item.showInnerCircle)}" .prependZero="${ifDefined(item.prependZero)}" @ui5-change=${ifDefined(this._clockChange)}></ui5-time-picker-clock>`; }
export default block0;
//# sourceMappingURL=TimeSelectionClocksTemplate.lit.js.map