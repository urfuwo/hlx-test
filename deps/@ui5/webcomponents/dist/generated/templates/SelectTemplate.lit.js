/* eslint no-unused-vars: 0 */
import { html, ifDefined, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
function block0(context, tags, suffix) { return html `<div class="ui5-select-root ui5-input-focusable-element" id="${ifDefined(this._id)}-select" @click="${this._onclick}">${this.selectedOptionIcon ? block1.call(this, context, tags, suffix) : undefined}<div class="ui5-select-label-root" data-sap-focus-ref tabindex="${ifDefined(this._effectiveTabIndex)}" role="combobox" aria-haspopup="listbox" aria-label="${ifDefined(this.ariaLabelText)}" aria-describedby="${ifDefined(this.valueStateTextId)}" aria-disabled="${ifDefined(this.isDisabled)}" aria-required="${ifDefined(this.required)}" aria-readonly="${ifDefined(this.readonly)}" aria-expanded="${ifDefined(this._isPickerOpen)}" aria-roledescription="${ifDefined(this._ariaRoleDescription)}" @keydown="${this._onkeydown}" @keypress="${this._handleKeyboardNavigation}" @keyup="${this._onkeyup}" @focusin="${this._onfocusin}" @focusout="${this._onfocusout}">${this.hasCustomLabel ? block2.call(this, context, tags, suffix) : block3.call(this, context, tags, suffix)}</div>${!this.readonly ? block4.call(this, context, tags, suffix) : undefined}${this.hasValueState ? block5.call(this, context, tags, suffix) : undefined}<slot name="formSupport"></slot></div>`; }
function block1(context, tags, suffix) { return suffix ? html `<${scopeTag("ui5-icon", tags, suffix)} aria-hidden="true" class="ui5-select-option-icon" name="${ifDefined(this.selectedOptionIcon)}"></${scopeTag("ui5-icon", tags, suffix)}>` : html `<ui5-icon aria-hidden="true" class="ui5-select-option-icon" name="${ifDefined(this.selectedOptionIcon)}"></ui5-icon>`; }
function block2(context, tags, suffix) { return html `<slot name="label"></slot>`; }
function block3(context, tags, suffix) { return html `${ifDefined(this._text)}`; }
function block4(context, tags, suffix) { return suffix ? html `<${scopeTag("ui5-icon", tags, suffix)} name="slim-arrow-down" input-icon ?pressed="${this._iconPressed}"></${scopeTag("ui5-icon", tags, suffix)}>` : html `<ui5-icon name="slim-arrow-down" input-icon ?pressed="${this._iconPressed}"></ui5-icon>`; }
function block5(context, tags, suffix) { return html `<span id="${ifDefined(this._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(this.valueStateText)}</span>`; }
export default block0;
//# sourceMappingURL=SelectTemplate.lit.js.map